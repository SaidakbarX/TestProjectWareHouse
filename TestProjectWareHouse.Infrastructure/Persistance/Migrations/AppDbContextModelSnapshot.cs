// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestProjectWareHouse.Infrastructure.Persistance;

#nullable disable

namespace TestProjectWareHouse.Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.Balance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("MeasurementId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("ResourceId", "MeasurementId")
                        .IsUnique();

                    b.ToTable("Balances", (string)null);
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.Measurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Measurements", (string)null);
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.ReceptionDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("ReceptionDocuments", (string)null);
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.ReceptionItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("MeasurementId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceptionDocumentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("ReceptionDocumentId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ReceptionItems", (string)null);
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.Resource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resources", (string)null);
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.ShipmentDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("ShipmentDocuments", (string)null);
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.ShipmentItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("MeasurementId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShipmentDocumentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ShipmentDocumentId");

                    b.ToTable("ShipmentItems", (string)null);
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.Balance", b =>
                {
                    b.HasOne("TestProjectWareHouse.Domain.Entities.Measurement", "Measurement")
                        .WithMany("Balances")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestProjectWareHouse.Domain.Entities.Resource", "Resource")
                        .WithMany("Balances")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Measurement");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.ReceptionItem", b =>
                {
                    b.HasOne("TestProjectWareHouse.Domain.Entities.Measurement", "Measurement")
                        .WithMany("ReceptionItems")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestProjectWareHouse.Domain.Entities.ReceptionDocument", "ReceptionDocument")
                        .WithMany("Items")
                        .HasForeignKey("ReceptionDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestProjectWareHouse.Domain.Entities.Resource", "Resource")
                        .WithMany("ReceptionItems")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Measurement");

                    b.Navigation("ReceptionDocument");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.ShipmentDocument", b =>
                {
                    b.HasOne("TestProjectWareHouse.Domain.Entities.Client", "Client")
                        .WithMany("ShipmentDocuments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.ShipmentItem", b =>
                {
                    b.HasOne("TestProjectWareHouse.Domain.Entities.Measurement", "Measurement")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestProjectWareHouse.Domain.Entities.Resource", "Resource")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestProjectWareHouse.Domain.Entities.ShipmentDocument", "ShipmentDocument")
                        .WithMany("Items")
                        .HasForeignKey("ShipmentDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Measurement");

                    b.Navigation("Resource");

                    b.Navigation("ShipmentDocument");
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.Client", b =>
                {
                    b.Navigation("ShipmentDocuments");
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.Measurement", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("ReceptionItems");

                    b.Navigation("ShipmentItems");
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.ReceptionDocument", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.Resource", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("ReceptionItems");

                    b.Navigation("ShipmentItems");
                });

            modelBuilder.Entity("TestProjectWareHouse.Domain.Entities.ShipmentDocument", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
